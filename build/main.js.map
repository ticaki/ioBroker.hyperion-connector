{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport { Library } from './lib/library';\nimport { Controller } from './lib/controller';\nimport type { configOfHyperionInstance } from './lib/types-d';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n/**\n * Represents the HyperionNg2 adapter.\n */\nclass HyperionNg2 extends utils.Adapter {\n    library: Library;\n    controller: Controller;\n    sendToTimeout: ioBroker.Timeout | undefined = undefined;\n\n    /**\n     * Creates an instance of HyperionNg2.\n     *\n     * @param [options] - The adapter options.\n     */\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'hyperion-ng2',\n        });\n        this.library = new Library(this);\n        this.controller = new Controller(this);\n\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n        this.config.activateSsdp = true;\n        let reconnectTimeFailed = false;\n        if (this.config.reconnectTime === undefined) {\n            reconnectTimeFailed = true;\n        } else if (typeof this.config.reconnectTime !== 'number') {\n            reconnectTimeFailed = true;\n            this.log.warn(`Reconnect interval is not a number, setting to default value 60`);\n        } else if (this.config.reconnectTime < 3) {\n            reconnectTimeFailed = true;\n            this.log.warn(`Reconnect interval is less than 3, setting to default value 60`);\n        } else if (this.config.reconnectTime > 3600) {\n            this.log.warn(`Reconnect interval is greater than 1h. Are you sure?`);\n        }\n        if (reconnectTimeFailed) {\n            this.config.reconnectTime = 60;\n        }\n        this.log.info(`Reconnect interval is set to ${this.config.reconnectTime} seconds`);\n        // Reset the connection indicator during startup\n        await this.setState('info.connection', false, true);\n        setTimeout(async () => {\n            await this.library.init();\n            await this.library.initStates(await this.getStatesAsync('*'));\n            await this.controller.init();\n        }, 1000);\n    }\n\n    /**\n     * Is called when the adapter shuts down - the callback must be called under any circumstances!\n     *\n     * @param callback - The callback function that must be called\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            if (this.sendToTimeout) {\n                clearTimeout(this.sendToTimeout);\n            }\n            this.controller.onUnload();\n            callback();\n        } catch {\n            callback();\n        }\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     *\n     * @param id - The ID of the state that changed\n     * @param state - The new state value or null/undefined if the state was deleted\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (state && !state.ack) {\n            await this.controller.onStateChange(id, state);\n        }\n    }\n\n    /**\n     * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n     * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n     *\n     * @param obj - The message object\n     */\n    private async onMessage(obj: ioBroker.Message): Promise<void> {\n        this.log.debug(`Data from configuration received : ${JSON.stringify(obj)}`);\n        if (typeof obj === 'object' && obj.message) {\n            this.log.debug(`with message : ${JSON.stringify(obj.message)}`);\n            if (typeof obj.message == 'string') {\n                this.log.info(`received message ${obj.message}`);\n            }\n            if (obj.command === 'getDevices') {\n                const devices: configOfHyperionInstance[] = [];\n                for (const hyperion of this.controller.hyperions) {\n                    const index = (this.config.devices ?? []).findIndex(d => d.UDN === hyperion.UDN);\n                    if (index >= 0) {\n                        devices[index] = {\n                            ...this.config.devices[index],\n                            name: hyperion.name,\n                            protocol: hyperion.protocol,\n                            ip: hyperion.ip,\n                            port: hyperion.port,\n                        };\n                    } else {\n                        devices.push({\n                            UDN: hyperion.UDN,\n                            name: hyperion.name,\n                            protocol: hyperion.protocol,\n                            ip: hyperion.ip,\n                            port: hyperion.port,\n                            enabled: true,\n                        });\n                    }\n                }\n                if (obj.callback) {\n                    if (JSON.stringify(devices) !== JSON.stringify(this.config.devices)) {\n                        this.sendToTimeout = this.setTimeout(() => {\n                            this.sendTo(obj.from, obj.command, { native: { devices: devices } }, obj.callback);\n                        }, 2000);\n                    } else {\n                        this.sendTo(obj.from, obj.command, undefined, obj.callback);\n                    }\n                }\n            } else if (obj.callback) {\n                this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n            }\n        } else if (obj.callback) {\n            this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new HyperionNg2(options);\n} else {\n    // otherwise start the instance directly\n    (() => new HyperionNg2())();\n}\n\nexport = HyperionNg2;\n"],
  "mappings": "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",
  "names": []
}
