{
  "version": 3,
  "sources": ["../../src/lib/hyperion.ts"],
  "sourcesContent": ["import WebSocket from 'ws';\nimport { BaseClass, type AdapterClassDefinition } from './library';\nimport type { configOfHyperionInstance, DescriptionType, SysInfoCommand } from './types-d';\nimport { controlDefaults, genericStateObjects, statesObjects } from './definition';\n\n/**\n * Hyperion class\n * do all then work here\n */\nexport class Hyperion extends BaseClass {\n    description: DescriptionType | undefined;\n    UDN: string;\n    ip: string = '';\n    protocol: string = '';\n    port: number = 0;\n    token: string | undefined = undefined;\n\n    reconnectTime: number = 30000;\n    fastReconnect: number | undefined = undefined;\n\n    ws: WebSocket | undefined;\n\n    delayTimeout: ioBroker.Timeout | undefined;\n    aliveTimeout: ioBroker.Timeout | undefined;\n    aliveCheckTimeout: ioBroker.Timeout | undefined;\n\n    legacyAliveCheck: boolean = true;\n\n    // authorize-tokenRequired // authorize-login\n    connectionState: 'connected' | 'disconnected' | 'authorize' | 'pendingAuthorize' | 'notAuthorize' = 'disconnected';\n    /**\n     * constructor\n     *\n     * @param adapter adapter class definition\n     * @param UDN unique device name\n     * @param config device description\n     */\n    constructor(adapter: AdapterClassDefinition, UDN: string, config: configOfHyperionInstance) {\n        super(adapter, config.name || 'Hyperion');\n        this.UDN = UDN.replace(/^uuid:/, '');\n        this.protocol = config.protocol;\n        this.ip = config.ip;\n        this.port = config.port;\n        this.token = config.token;\n        this.reconnectTime = this.adapter.config.reconnectTime * 1000;\n        this.log.debug(\n            `Create Hyperion instance ${this.UDN} with ${this.ip}:${this.port} and ${this.protocol}. Reconnect time: ${this.reconnectTime / 1000}s`,\n        );\n    }\n\n    checkHyperionVersion(): void {\n        if (!this.description) {\n            return;\n        }\n        let version = this.description.device.modelNumber;\n        if (version) {\n            const temp = version.match(/(\\d+\\.\\d+\\.\\d+)/);\n            if (temp) {\n                version = temp[1];\n\n                const parts = version.split('.');\n                this.log.debug('Hyperion version:', version);\n                if (parts.length >= 3) {\n                    if (parseInt(parts[0]) > 2 || parseInt(parts[1]) > 0 || parseInt(parts[2]) > 16) {\n                        this.legacyAliveCheck = false;\n                    } else {\n                        this.log.warn('Hyperion version is equal or lower than 2.0.16, use legacy alive check');\n                        this.legacyAliveCheck = true;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * init\n     *\n     * initialize the device\n     */\n    async init(): Promise<void> {\n        this.setOnline(false);\n        await this.library.writedp(this.UDN, undefined, {\n            _id: '',\n            type: 'device',\n            common: {\n                name: this.description ? this.description.device.friendlyName : this.name,\n                statusStates: { onlineId: 'online', errorId: 'error' },\n            },\n            native: {},\n        });\n        await this.library.writeFromJson(this.UDN, 'device', statesObjects, controlDefaults, false, true);\n        await this.library.writedp(`${this.UDN}.authenticationError`, false, genericStateObjects.authenticationError);\n        this.adapter.subscribeStates(`${this.library.cleandp(`${this.UDN}.controls`)}.*`);\n\n        if (this.token === undefined || this.token.length < 36) {\n            const obj = await this.adapter.getObjectAsync(this.UDN);\n            if (obj && obj.native && obj.native.token) {\n                this.token = this.adapter.decrypt(this.UDN, obj.native.token);\n            }\n        }\n\n        await this.reconnect();\n    }\n    /**\n     * setOnline\n     *\n     * @param isOnline set the online state.\n     */\n    setOnline(isOnline: boolean): void {\n        if (isOnline && this.connectionState !== 'connected') {\n            this.connectionState = 'connected';\n            this.adapter.controller.setOnline().catch(() => {\n                // nothing to do\n            });\n            this.library.writedp(`${this.UDN}.online`, isOnline, genericStateObjects.online).catch(() => {\n                // nothing to do\n            });\n        } else if (!isOnline && this.connectionState !== 'disconnected') {\n            this.connectionState = 'disconnected';\n            this.adapter.controller.setOnline().catch(() => {\n                // nothing to do\n            });\n            this.library.writedp(`${this.UDN}.online`, isOnline, genericStateObjects.online).catch(() => {\n                // nothing to do\n            });\n        }\n    }\n\n    /**\n     * createWebsocketConnectionToHyperion\n     */\n    async reconnect(): Promise<void> {\n        if (this.ws) {\n            this.ws.terminate;\n        }\n        try {\n            // get description of hyperion server\n            this.description = await this.adapter.controller.network.getSsdpDescription(\n                this.protocol,\n                this.ip,\n                this.port,\n            );\n            if (this.description === undefined) {\n                throw new Error('Got no description');\n            }\n\n            this.checkHyperionVersion();\n\n            //update device name\n            this.name = this.description.device.friendlyName;\n            await this.library.writedp(this.UDN, undefined, {\n                _id: '',\n                type: 'device',\n                common: {\n                    name: this.description.device.friendlyName,\n                },\n                native: {},\n            });\n            // write description to states\n            await this.library.writeFromJson(\n                `${this.UDN}.device`,\n                'device.description',\n                statesObjects,\n                this.description,\n            );\n            //URLBase is the url to connect to the server\n            //replace http with ws and https with wss\n            const url = this.description.URLBase.replace('http://', 'ws://').replace('https://', 'wss://');\n            this.log.debug(`Re-/Connect to: ${url}`);\n\n            // create websocket connection\n            this.ws = new WebSocket(url);\n            this.ws.addEventListener('open', async () => {\n                if (this.description) {\n                    this.log.info(`Connected to ${this.description.device.friendlyName}`);\n                }\n                this.fastReconnect = undefined;\n                await this.library.writedp(`${this.UDN}.controls.checkOnline`, false, genericStateObjects.checkOnline);\n                if (this.ws) {\n                    this.ws.send(\n                        JSON.stringify({\n                            command: 'authorize',\n                            subcommand: 'tokenRequired',\n                        }),\n                    );\n                    /*this.ws.send(\n                        JSON.stringify({\n                            command: 'sysinfo',\n                            tan: 1,\n                        }),\n                    );\n                    this.ws.send(\n                        JSON.stringify({\n                            command: 'serverinfo',\n                            subscribe: ['all'],\n                            tan: 1,\n                        }),\n                    );*/\n                }\n            });\n            this.ws.addEventListener('message', async event => {\n                try {\n                    const data = typeof event.data === 'string' ? JSON.parse(event.data) : undefined;\n                    if (data) {\n                        if (data.command.startsWith('authorize-')) {\n                            //handle authorize\n\n                            this.log.debug('Received:', JSON.stringify(data));\n                            // if authorize-login or authorize-tokenRequired with required false we start the connection\n                            if (data.command === 'authorize-login' && data.success === true) {\n                                this.log.info('Login successful');\n                                this.setOnline(true);\n                                this.aliveReset();\n                                if (this.ws) {\n                                    this.ws.send(\n                                        JSON.stringify({\n                                            command: 'sysinfo',\n                                            tan: 1,\n                                        }),\n                                    );\n                                    this.ws.send(\n                                        JSON.stringify({\n                                            command: 'serverinfo',\n                                            subcommand: 'subscribe',\n                                            subscribe: [],\n                                            tan: 1,\n                                        }),\n                                    );\n                                    return;\n                                }\n                            } else if (\n                                data.command === 'authorize-tokenRequired' &&\n                                data.info &&\n                                data.info.required === false\n                            ) {\n                                this.log.info('No Login required');\n\n                                this.setOnline(true);\n                                this.aliveReset();\n                                if (this.ws) {\n                                    this.ws.send(\n                                        JSON.stringify({\n                                            command: 'sysinfo',\n                                            tan: 1,\n                                        }),\n                                    );\n                                    this.ws.send(\n                                        JSON.stringify({\n                                            command: 'serverinfo',\n                                            subscribe: [],\n                                            tan: 1,\n                                        }),\n                                    );\n                                    return;\n                                }\n                            } else if (data.command === 'authorize-tokenRequired') {\n                                if (data.info && data.info.required === true) {\n                                    this.connectionState = 'authorize';\n                                    if (this.token !== undefined && this.token.length >= 36) {\n                                        // we have a token try it\n                                        if (this.ws) {\n                                            this.ws.send(\n                                                JSON.stringify({\n                                                    command: 'authorize',\n                                                    subcommand: 'login',\n                                                    token: this.token,\n                                                }),\n                                            );\n                                            return;\n                                        }\n                                    } else {\n                                        // no token saved so request one\n                                        this.connectionState = 'pendingAuthorize';\n                                        if (this.ws) {\n                                            this.log.warn('Requesting token! Please check the Hyperion server webui!');\n                                            this.ws.send(\n                                                JSON.stringify({\n                                                    command: 'authorize',\n                                                    subcommand: 'requestToken',\n                                                    comment: 'Iobroker HyperionConnector',\n                                                    id: 'io341',\n                                                }),\n                                            );\n                                            return;\n                                        }\n                                    }\n                                }\n                            } else if (data.command === 'authorize-requestToken' && data.success === true) {\n                                if (data.success === true) {\n                                    this.connectionState = 'authorize';\n                                    this.log.debug('Token request successful');\n                                    this.token = data.info.token;\n                                    if (typeof this.token === 'string' && this.token.length >= 36) {\n                                        await this.adapter.extendObject(this.UDN, {\n                                            native: {\n                                                token: this.adapter.encrypt(this.UDN, this.token),\n                                            },\n                                        });\n\n                                        if (this.ws) {\n                                            this.ws.send(\n                                                JSON.stringify({\n                                                    command: 'authorize',\n                                                    subcommand: 'login',\n                                                    token: this.token,\n                                                }),\n                                            );\n                                            return;\n                                        }\n                                    }\n                                }\n                            } else if (data.command === 'authorize-requestToken' && data.success === false) {\n                                this.log.error('Token request timeout or denied');\n                            } else if (data.command === 'authorize-login' && data.success === false) {\n                                this.log.error(\n                                    'Login failed - wrong token? Please check the Hyperion server webui and adminpage of this adapter.',\n                                );\n                                const obj = await this.adapter.getObjectAsync(this.UDN);\n                                if (obj && obj.native && obj.native.token && obj.native.token.length >= 36) {\n                                    this.log.error(\n                                        'An automatically generated token was found for this server, in the course of this error the token was deleted. Restart the adapter and confirm access in the Hyperion webui.',\n                                    );\n                                    delete obj.native.token;\n                                    await this.adapter.setObject(obj._id, obj);\n                                }\n                            }\n                            this.log.error('Not authorized');\n                            this.connectionState = 'notAuthorize';\n                            await this.library.writedp(\n                                `${this.UDN}.authenticationError`,\n                                true,\n                                genericStateObjects.online,\n                            );\n                            this.onUnload();\n                            return;\n                        } else if (data.command === 'serverinfo') {\n                            const info = data.info;\n                            info.components = this.changeArrayToJsonIfName(info.components);\n                            await this.updateComponentControlsStates(info.components);\n                            info.effects = this.changeArrayToJsonIfName(info.effects);\n                            await this.library.writedp(\n                                `${this.UDN}.priorities.json`,\n                                JSON.stringify(info.priorities),\n                                genericStateObjects.json,\n                            );\n                            await this.library.writedp(\n                                `${this.UDN}.leds.json`,\n                                JSON.stringify(info.leds),\n                                genericStateObjects.json,\n                            );\n\n                            //delete useless leds states\n                            delete info.leds;\n                            await this.library.writeFromJson(this.UDN, 'device.serverinfo', statesObjects, info);\n                            await this.cleanTree();\n                        } else if (data.command.endsWith === 'priorities-update') {\n                            if (this.ws) {\n                                this.ws.send(\n                                    JSON.stringify({\n                                        command: 'serverinfo',\n                                        tan: 1,\n                                    }),\n                                );\n                            }\n                            //maybe this work with 2.0.17\n                            /*await this.library.writeFromJson(\n                                this.UDN,\n                                'device.serverinfo.priorities',\n                                statesObjects,\n                                (data as PrioritiesUpdateCommand).data.priorities,\n                            );\n                            await this.library.writedp(\n                                `${this.UDN}.priorities.json`,\n                                JSON.stringify((data as PrioritiesUpdateCommand).data.priorities),\n                                genericStateObjects.json,\n                            );*/\n                            this.log.debug('Received:', JSON.stringify(data));\n                        } else if (data.command.endsWith('-update')) {\n                            const path = data.command.replace('-update', '');\n                            const info: any = {};\n                            if (path == 'components') {\n                                info.components = this.changeArrayToJsonIfName(data.data);\n                                await this.updateComponentControlsStates(info.components);\n                            } else if (path == 'effects') {\n                                info.effects = this.changeArrayToJsonIfName(data.data);\n                            } else if (path == 'leds') {\n                                await this.library.writedp(\n                                    `${this.UDN}.leds.json`,\n                                    JSON.stringify(data.data),\n                                    genericStateObjects.json,\n                                );\n                            } else {\n                                if (this.ws) {\n                                    this.ws.send(\n                                        JSON.stringify({\n                                            command: 'serverinfo',\n                                            tan: 1,\n                                        }),\n                                    );\n                                }\n                                // We cant handle unknown updates so out here and wait for serverinfo\n                                return;\n                            }\n\n                            await this.library.writeFromJson(this.UDN, 'device.serverinfo', statesObjects, info);\n                            this.log.debug('Received:', JSON.stringify(data));\n                        } else if (data.command === 'sysinfo') {\n                            await this.library.writeFromJson(\n                                this.UDN,\n                                'device.sysinfo',\n                                statesObjects,\n                                (data as SysInfoCommand).info,\n                            );\n                        } else {\n                            await this.updateACKControlsStates(data);\n                            this.log.debug('Received:', JSON.stringify(data));\n                        }\n                        this.aliveReset();\n                    }\n                } catch {\n                    // nothing to do\n                }\n            });\n\n            this.ws.addEventListener('close', () => {\n                this.log.info('Connection closed');\n                this.ws = undefined;\n\n                if (this.connectionState !== 'notAuthorize') {\n                    this.aliveReset(false);\n                    this.library\n                        .writedp(`${this.UDN}.controls.checkOnline`, false, genericStateObjects.checkOnline)\n                        .catch(() => {\n                            // nothing to do\n                        });\n                    this.delayReconnect();\n                } else {\n                    this.setOnline(false);\n                }\n            });\n\n            this.ws.addEventListener('error', async error => {\n                this.log.error('Error:', error.message);\n                this.delayReconnect();\n            });\n            this.ws.on('pong', () => {\n                //this.log.debug('Pong received');\n                this.aliveReset();\n            });\n        } catch {\n            this.log.debug('No connection');\n            if (this.ws) {\n                this.ws.terminate();\n            }\n            this.ws = undefined;\n            this.delayReconnect();\n        }\n    }\n\n    async cleanTree(): Promise<void> {\n        for (const state of ['priorities', 'adjustment', 'transform', 'activeLedColor']) {\n            await this.library.garbageColleting(`${this.UDN}.${state}`);\n        }\n    }\n\n    /**\n     * delayReconnect\n     *\n     * delay the reconnect to avoid a loop\n     */\n    delayReconnect(): void {\n        this.setOnline(false);\n        if (this.delayTimeout) {\n            this.adapter.clearTimeout(this.delayTimeout);\n        }\n        if (this.aliveTimeout) {\n            this.adapter.clearTimeout(this.aliveTimeout);\n        }\n        this.library.writedp(`${this.UDN}.online`, false, genericStateObjects.online).catch(() => {\n            this.log.error('Error in writedp');\n        });\n\n        // reset fast reconnect if time is over\n        if (this.fastReconnect !== undefined && this.fastReconnect <= new Date().getTime()) {\n            this.fastReconnect = undefined;\n            this.library\n                .writedp(`${this.UDN}.controls.checkOnline`, false, genericStateObjects.checkOnline)\n                .catch(() => {\n                    // nothing to do\n                });\n        }\n        this.delayTimeout = this.adapter.setTimeout(\n            () => {\n                this.reconnect().catch(() => {\n                    // nothing to do\n                });\n            },\n            // fast reconnect if time is not over\n            this.fastReconnect !== undefined && this.fastReconnect > new Date().getTime() ? 1000 : this.reconnectTime,\n        );\n    }\n\n    /**\n     * check if the connection is alive\n     * if not, terminate the connection\n     * and reconnect\n     */\n    aliveCheck(): void {\n        if (this.aliveTimeout) {\n            this.adapter.clearTimeout(this.aliveTimeout);\n        }\n        this.aliveTimeout = this.adapter.setTimeout(\n            async () => {\n                if (this.ws) {\n                    //this.log.debug('Ping');\n                    if (this.legacyAliveCheck) {\n                        this.ws.send(\n                            JSON.stringify({\n                                command: 'sysinfo',\n                                tan: 1,\n                            }),\n                        );\n                    } else {\n                        this.ws.ping();\n                    }\n                }\n                this.aliveCheckTimeout = this.adapter.setTimeout(() => {\n                    this.log.warn('connection lost!');\n                    if (this.ws) {\n                        this.ws.terminate();\n                    }\n                    this.ws = undefined;\n                    this.delayReconnect();\n                }, 900);\n            },\n            this.legacyAliveCheck ? 30000 : 5000,\n        );\n    }\n\n    /**\n     * reset the alive check\n     *\n     * @param stop stop the alive check\n     */\n    aliveReset(stop: boolean = false): void {\n        //this.log.debug('Reset alive check');\n        if (this.aliveCheckTimeout) {\n            this.adapter.clearTimeout(this.aliveCheckTimeout);\n        }\n        if (this.aliveTimeout) {\n            this.adapter.clearTimeout(this.aliveTimeout);\n        }\n        if (!stop) {\n            this.aliveCheck();\n        }\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    onUnload(): void {\n        if (this.ws) {\n            this.ws.close();\n        }\n        if (this.delayTimeout) {\n            this.adapter.clearTimeout(this.delayTimeout);\n        }\n        if (this.aliveTimeout) {\n            this.adapter.clearTimeout(this.aliveTimeout);\n        }\n        if (this.aliveCheckTimeout) {\n            this.adapter.clearTimeout(this.aliveCheckTimeout);\n        }\n        this.setOnline(false);\n        this.log.debug('unload');\n    }\n\n    /**\n     * changeArrayToJsonIfName\n     *\n     * @param array array to check\n     */\n    changeArrayToJsonIfName(array: any): any {\n        const result: { [key: string]: any } | undefined = {};\n        let useArray = false;\n        if (Array.isArray(array)) {\n            for (const a of array) {\n                if (a.name) {\n                    useArray = true;\n                    result[a.name] = a;\n                }\n            }\n        } else if (array.name) {\n            useArray = false;\n            for (const a in array) {\n                if (a === 'name') {\n                    result[array[a]] = array;\n                    return result;\n                }\n            }\n        }\n        return useArray ? result : array;\n    }\n\n    async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (state) {\n            const parts = id.split('.');\n            if (parts && parts.length >= 4 && parts[3] === 'controls') {\n                if (parts.length == 6 && parts[4] === 'color' && parts[5] === 'activate') {\n                    if (this.ws) {\n                        const values = this.library.getStates(`${this.UDN}.controls.color.`);\n                        const command: { [key: string]: boolean | string | number | null | any[] } = {\n                            command: 'color',\n                        };\n                        for (const k in values) {\n                            const v = k as keyof typeof values;\n                            const key = k.split('.').pop();\n                            if (key !== undefined) {\n                                let val: any = values[v]!.val;\n                                const defaultValue =\n                                    controlDefaults.controls.color[key as keyof typeof controlDefaults.controls.color];\n                                if (defaultValue !== undefined) {\n                                    if (typeof defaultValue === 'object' && Array.isArray(defaultValue)) {\n                                        val = val ? JSON.parse(val) : [];\n                                    }\n                                }\n                                if (key !== 'activate' && values[k] && values[v]!.val !== undefined) {\n                                    command[key] = val;\n                                }\n                            }\n                        }\n                        this.ws.send(JSON.stringify({ ...command, tan: 100 }));\n                    }\n                } else if (parts.length == 6 && parts[4] === 'system') {\n                    if (this.ws) {\n                        this.ws.send(\n                            JSON.stringify({\n                                command: parts[4],\n                                subcommand: parts[5],\n                                tan: 100,\n                            }),\n                        );\n                    }\n                } else if (parts.length == 6 && parts[4] === 'sourceselect') {\n                    if (this.ws) {\n                        try {\n                            this.ws.send(\n                                JSON.stringify(\n                                    parts[5] === 'auto'\n                                        ? {\n                                              command: 'sourceselect',\n                                              tan: 100,\n                                              auto: true,\n                                          }\n                                        : {\n                                              command: 'sourceselect',\n                                              tan: 100,\n                                              priority: state.val,\n                                          },\n                                ),\n                            );\n                        } catch {\n                            this.log.warn(`Invalid command from ${id}`);\n                        }\n                    }\n                } else if (parts.length == 6 && parts[4] === 'clear') {\n                    if (this.ws) {\n                        this.ws.send(\n                            JSON.stringify({\n                                command: 'clear',\n                                priority: state.val,\n                                tan: 100,\n                            }),\n                        );\n                    }\n                } else if (parts.length == 6 && parts[4] === 'componentstate') {\n                    if (this.ws) {\n                        this.ws.send(\n                            JSON.stringify({\n                                command: 'componentstate',\n                                componentstate: {\n                                    component: parts[5],\n                                    state: state.val,\n                                },\n                                tan: 90,\n                            }),\n                        );\n                    }\n                } else if (parts.length == 5 && parts[4] === 'action') {\n                    if (this.ws && typeof state.val === 'string') {\n                        try {\n                            const command = JSON.parse(state.val);\n                            command.tan = 220;\n                            this.ws.send(JSON.stringify(command));\n                        } catch {\n                            this.log.warn(`Invalid JSON in ${id}`);\n                        }\n                    }\n                } else if (parts.length == 5 && parts[4] === 'checkOnline') {\n                    if (!this.ws && this.connectionState === 'disconnected' && state.val === true) {\n                        this.fastReconnect = new Date().getTime() + 30000;\n                        this.delayReconnect();\n                        return;\n                    }\n                    this.fastReconnect = undefined;\n                    await this.library.writedp(\n                        `${this.UDN}.controls.checkOnline`,\n                        false,\n                        genericStateObjects.checkOnline,\n                    );\n                    if (state.val === true) {\n                        this.log.warn(\n                            `Dont use this state just for fun :) ${\n                                this.ws\n                                    ? 'Server is online must be offline! '\n                                    : this.connectionState === 'notAuthorize'\n                                      ? 'The reason for being offline is a failed login, a faster reconnection is not possible!'\n                                      : ''\n                            }`,\n                        );\n                    }\n                }\n            }\n        }\n    }\n\n    async updateACKControlsStates(data: any): Promise<void> {\n        if (data.success) {\n            if (data.tan == 220) {\n                this.log.debug(`Command ${data.command} successful - JSON: ${JSON.stringify(data)}`);\n                const state = this.library.readdb(`${this.UDN}.controls.action`);\n                if (state !== undefined) {\n                    await this.library.writedp(`${this.UDN}.controls.action`, state.val);\n                }\n            } else if (data.tan == 100) {\n                const commands = data.command.split('-');\n                this.log.debug(`Command ${commands[0]} successful - JSON: ${JSON.stringify(data)}`);\n                const values = this.library.getStates(`${this.UDN}.controls.${commands[0]}.`);\n                for (const k in values) {\n                    const v = k as keyof typeof values;\n                    if (commands[0] == 'color' && k.endsWith('activate')) {\n                        await this.library.writedp(k, false);\n                    } else if (commands[0] == 'sourceselect' && k.endsWith('auto')) {\n                        await this.library.writedp(k, false);\n                    } else if (commands[0] == 'system') {\n                        await this.library.writedp(k, false);\n                    } else {\n                        await this.library.writedp(k, values[v]!.val);\n                    }\n                }\n            }\n        } else if (data.tan >= 100) {\n            this.log.warn(`Command ${data.command} failed - JSON: ${JSON.stringify(data)}`);\n        }\n    }\n    async updateComponentControlsStates(data: any): Promise<void> {\n        for (const k in data) {\n            const v = k as keyof typeof data;\n            await this.library.writedp(`${this.UDN}.controls.componentstate.${k}`, data[v].enabled);\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["WebSocket"]
}
