{
  "version": 3,
  "sources": ["../../src/lib/hyperion.ts"],
  "sourcesContent": ["import WebSocket from 'ws';\nimport { BaseClass, type AdapterClassDefinition } from './library';\nimport type { configOfHyperionInstance, DescriptionType, SysInfoCommand } from './types-d';\nimport { controlDefaults, genericStateObjects, statesObjects } from './definition';\n\n/**\n * Hyperion class\n * do all then work here\n */\nexport class Hyperion extends BaseClass {\n    description: DescriptionType | undefined;\n    UDN: string;\n    ip: string = '';\n    protocol: string = '';\n    port: number = 0;\n\n    ws: WebSocket | undefined;\n\n    delayTimeout: ioBroker.Timeout | undefined;\n    aliveTimeout: ioBroker.Timeout | undefined;\n    aliveCheckTimeout: ioBroker.Timeout | undefined;\n\n    legacyAliveCheck: boolean = true;\n\n    /**\n     * constructor\n     *\n     * @param adapter adapter class definition\n     * @param UDN unique device name\n     * @param config device description\n     */\n    constructor(adapter: AdapterClassDefinition, UDN: string, config: configOfHyperionInstance) {\n        super(adapter, config.name || 'Hyperion');\n        this.UDN = UDN.replace(/^uuid:/, '');\n        this.protocol = config.protocol;\n        this.ip = config.ip;\n        this.port = config.port;\n    }\n\n    checkHyperionVersion(): void {\n        if (!this.description) {\n            return;\n        }\n        let version = this.description.device.modelNumber;\n        if (version) {\n            const temp = version.match(/(\\d+\\.\\d+\\.\\d+)/);\n            if (temp) {\n                version = temp[1];\n\n                const parts = version.split('.');\n                this.log.debug('Hyperion version:', version);\n                if (parts.length >= 3) {\n                    if (parseInt(parts[0]) > 2 || parseInt(parts[1]) > 0 || parseInt(parts[2]) > 16) {\n                        this.legacyAliveCheck = false;\n                    } else {\n                        this.log.warn('Hyperion version is equal or lower than 2.0.16, use legacy alive check');\n                        this.legacyAliveCheck = true;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * init\n     *\n     * initialize the device\n     */\n    async init(): Promise<void> {\n        await this.library.writedp(this.UDN, undefined, {\n            _id: '',\n            type: 'device',\n            common: {\n                name: this.description ? this.description.device.friendlyName : this.name,\n            },\n            native: {},\n        });\n        await this.library.writeFromJson(this.UDN, 'device', statesObjects, controlDefaults, false, true);\n        this.adapter.subscribeStates(`${this.library.cleandp(`${this.UDN}.controls`)}.*`);\n        await this.reconnect();\n    }\n    /**\n     * setOnline\n     *\n     * @param isOnline set the online state.\n     */\n    setOnline(isOnline: boolean): void {\n        this.library.writedp(`${this.UDN}.online`, isOnline, genericStateObjects.online).catch(() => {\n            // nothing to do\n        });\n    }\n\n    /**\n     * createWebsocketConnectionToHyperion\n     */\n    async reconnect(): Promise<void> {\n        if (this.ws) {\n            this.ws.terminate;\n        }\n        try {\n            // get description of hyperion server\n            this.description = await this.adapter.controller.network.getSsdpDescription(\n                this.protocol,\n                this.ip,\n                this.port,\n            );\n            if (this.description === undefined) {\n                throw new Error('Got no description');\n            }\n\n            this.checkHyperionVersion();\n\n            //update device name\n            this.name = this.description.device.friendlyName;\n            await this.library.writedp(this.UDN, undefined, {\n                _id: '',\n                type: 'device',\n                common: {\n                    name: this.description.device.friendlyName,\n                },\n                native: {},\n            });\n            // write description to states\n            await this.library.writeFromJson(\n                `${this.description.device.UDN}.device`,\n                'device.description',\n                statesObjects,\n                this.description,\n            );\n            //URLBase is the url to connect to the server\n            //replace http with ws and https with wss\n            const url = this.description.URLBase.replace('http://', 'ws://').replace('https://', 'wss://');\n            this.log.debug(`Re-/Connect to: ${url}`);\n\n            // create websocket connection\n            this.ws = new WebSocket(url);\n            this.ws.addEventListener('open', async () => {\n                if (this.description) {\n                    this.log.info(`Connected to ${this.description.device.friendlyName}`);\n                }\n                this.aliveReset();\n                if (this.ws) {\n                    this.ws.send(\n                        JSON.stringify({\n                            command: 'sysinfo',\n                            tan: 1,\n                        }),\n                    );\n                    this.ws.send(\n                        JSON.stringify({\n                            command: 'serverinfo',\n                            subscribe: ['all'],\n                            tan: 1,\n                        }),\n                    );\n                }\n            });\n            this.ws.addEventListener('message', async event => {\n                try {\n                    this.aliveReset();\n                    const data = typeof event.data === 'string' ? JSON.parse(event.data) : undefined;\n                    if (data) {\n                        if (data.command === 'serverinfo') {\n                            const info = data.info;\n                            info.components = this.changeArrayToJsonIfName(info.components);\n                            info.effects = this.changeArrayToJsonIfName(info.effects);\n                            await this.library.writeFromJson(this.UDN, 'device.serverinfo', statesObjects, info);\n                            await this.cleanTree();\n                        } else if (data.command === 'priorities-update') {\n                            if (this.ws) {\n                                this.ws.send(\n                                    JSON.stringify({\n                                        command: 'serverinfo',\n                                        tan: 1,\n                                    }),\n                                );\n                            }\n                            /*await this.library.writeFromJson(\n                                this.UDN,\n                                'device.serverinfo.priorities',\n                                statesObjects,\n                                (data as PrioritiesUpdateCommand).data.priorities,\n                            );*/\n                            this.log.debug('Received:', JSON.stringify(data));\n                        } else if (data.command === 'sysinfo') {\n                            await this.library.writeFromJson(\n                                this.UDN,\n                                'device.sysinfo',\n                                statesObjects,\n                                (data as SysInfoCommand).info,\n                            );\n                        } else {\n                            await this.updateControlsStates(data);\n                            this.log.debug('Received:', JSON.stringify(data));\n                        }\n                    }\n                } catch {\n                    // nothing to do\n                }\n            });\n\n            this.ws.addEventListener('close', () => {\n                this.log.info('Connection closed');\n                this.ws = undefined;\n                this.delayReconnect();\n            });\n\n            this.ws.addEventListener('error', async error => {\n                this.log.error('Error:', error.message);\n                this.delayReconnect();\n            });\n            this.ws.on('pong', () => {\n                //this.log.debug('Pong received');\n                this.aliveReset();\n            });\n        } catch {\n            this.log.debug('No connection');\n            if (this.ws) {\n                this.ws.terminate();\n            }\n            this.ws = undefined;\n            this.delayReconnect();\n        }\n    }\n\n    async cleanTree(): Promise<void> {\n        for (const state of ['priorities', 'adjustment', 'transform', 'activeLedColor']) {\n            await this.library.garbageColleting(`${this.UDN}.${state}`);\n        }\n    }\n\n    /**\n     * delayReconnect\n     *\n     * delay the reconnect to avoid a loop\n     */\n    delayReconnect(): void {\n        this.setOnline(false);\n        if (this.delayTimeout) {\n            this.adapter.clearTimeout(this.delayTimeout);\n        }\n        if (this.aliveTimeout) {\n            this.adapter.clearTimeout(this.aliveTimeout);\n        }\n        this.library.writedp(`${this.UDN}.online`, false, genericStateObjects.online).catch(() => {\n            this.log.error('Error in writedp');\n        });\n        this.delayTimeout = this.adapter.setTimeout(() => {\n            this.reconnect().catch(() => {\n                // nothing to do\n            });\n        }, 15000);\n    }\n\n    /**\n     * check if the connection is alive\n     * if not, terminate the connection\n     * and reconnect\n     */\n    aliveCheck(): void {\n        if (this.aliveTimeout) {\n            this.adapter.clearTimeout(this.aliveTimeout);\n        }\n        this.aliveTimeout = this.adapter.setTimeout(\n            async () => {\n                if (this.ws) {\n                    //this.log.debug('Ping');\n                    if (this.legacyAliveCheck) {\n                        this.ws.send(\n                            JSON.stringify({\n                                command: 'sysinfo',\n                                tan: 1,\n                            }),\n                        );\n                    } else {\n                        this.ws.ping();\n                    }\n                }\n                this.aliveCheckTimeout = this.adapter.setTimeout(() => {\n                    this.log.warn('connection lost!');\n                    if (this.ws) {\n                        this.ws.terminate();\n                    }\n                    this.ws = undefined;\n                    this.delayReconnect();\n                }, 900);\n            },\n            this.legacyAliveCheck ? 30000 : 5000,\n        );\n    }\n\n    /**\n     * reset the alive check\n     */\n    aliveReset(): void {\n        //this.log.debug('Reset alive check');\n        this.setOnline(true);\n        if (this.aliveCheckTimeout) {\n            this.adapter.clearTimeout(this.aliveCheckTimeout);\n        }\n        if (this.aliveTimeout) {\n            this.adapter.clearTimeout(this.aliveTimeout);\n        }\n        this.aliveCheck();\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    onUnload(): void {\n        if (this.ws) {\n            this.ws.close();\n        }\n        if (this.delayTimeout) {\n            this.adapter.clearTimeout(this.delayTimeout);\n        }\n        if (this.aliveTimeout) {\n            this.adapter.clearTimeout(this.aliveTimeout);\n        }\n        if (this.aliveCheckTimeout) {\n            this.adapter.clearTimeout(this.aliveCheckTimeout);\n        }\n        this.log.info('unload');\n    }\n\n    /**\n     * changeArrayToJsonIfName\n     *\n     * @param array array to check\n     */\n    changeArrayToJsonIfName(array: any[]): any {\n        const result: { [key: string]: any } | undefined = {};\n        let useArray = false;\n        if (Array.isArray(array)) {\n            for (const a of array) {\n                if (a.name) {\n                    useArray = true;\n                    result[a.name] = a;\n                }\n            }\n        }\n        return useArray ? result : array;\n    }\n\n    async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (state) {\n            const parts = id.split('.');\n            if (parts.length == 6) {\n                if (parts[3] === 'controls' && parts[4] === 'color' && parts[5] === 'activate') {\n                    if (this.ws) {\n                        const values = this.library.getStates(`${this.UDN}.controls.color.`);\n                        const command: { [key: string]: boolean | string | number | null | any[] } = {\n                            command: 'color',\n                        };\n                        for (const k in values) {\n                            const v = k as keyof typeof values;\n                            const key = k.split('.').pop();\n                            if (key !== undefined) {\n                                let val: any = values[v]!.val;\n                                const defaultValue =\n                                    controlDefaults.controls.color[key as keyof typeof controlDefaults.controls.color];\n                                if (defaultValue !== undefined) {\n                                    if (typeof defaultValue === 'object' && Array.isArray(defaultValue)) {\n                                        val = val ? JSON.parse(val) : [];\n                                    }\n                                }\n                                if (key !== 'activate' && values[k] && values[v]!.val !== undefined) {\n                                    command[key] = val;\n                                }\n                            }\n                        }\n                        this.ws.send(JSON.stringify({ ...command, tan: 100 }));\n                    }\n                }\n            } else if (parts.length == 5 && parts[4] === 'action') {\n                if (this.ws && typeof state.val === 'string') {\n                    try {\n                        const command = JSON.parse(state.val);\n                        command.tan = 220;\n                        this.ws.send(JSON.stringify(command));\n                    } catch {\n                        this.log.warn(`Invalid JSON in ${id}`);\n                    }\n                }\n            }\n        }\n    }\n    async updateControlsStates(data: any): Promise<void> {\n        if (data.success) {\n            if (data.tan == 220) {\n                const state = this.library.readdb(`${this.UDN}.controls.action`);\n                if (state !== undefined) {\n                    await this.library.writedp(`${this.UDN}.controls.action`, state.val);\n                }\n            } else if (data.command === 'color') {\n                const values = this.library.getStates(`${this.UDN}.controls.color.`);\n                for (const k in values) {\n                    const v = k as keyof typeof values;\n                    if (k.endsWith('activate')) {\n                        await this.library.writedp(k, false);\n                    } else {\n                        await this.library.writedp(k, values[v]!.val);\n                    }\n                }\n            }\n        } else {\n            this.log.warn(`Command ${data.command} failed - JSON: ${JSON.stringify(data)}`);\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["WebSocket"]
}
