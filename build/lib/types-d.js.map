{
  "version": 3,
  "sources": ["../../src/lib/types-d.ts"],
  "sourcesContent": ["export type ssdpResponseType = {\n    /**\n     * Unique Service Name\n     */\n    USN: string;\n    /**\n     * ip address of the device\n     */\n    ip: string;\n};\n\nexport type DescriptionDeviceType = {\n    deviceType: string;\n    friendlyName: string;\n    manufacturer: string;\n    manufacturerURL: string;\n    modelDescription: string;\n    modelName: string;\n    modelNumber: string;\n    modelURL: string;\n    serialNumber: string;\n    UDN: string;\n    ports: {\n        jsonServer: number;\n        sslServer: number;\n        protoBuffer: number;\n        flatBuffer: number;\n    };\n    presentationURL: string;\n    iconList: {\n        icon: {\n            mimetype: string;\n            height: number;\n            width: number;\n            depth: number;\n            url: string;\n        };\n    };\n};\nexport type DescriptionTypeRoot = {\n    '?xml': string;\n    root: DescriptionType;\n};\n\nexport type DescriptionType = {\n    /**\n     * deviceType\n     */\n    specVersion: {\n        /**\n         * major\n         */\n        major: number;\n        /**\n         * minor\n         */\n        minor: number;\n    };\n    URLBase: string;\n    /**\n     * deviceType\n     */\n    device: DescriptionDeviceType;\n};\n\nexport type DeviceType = {\n    deviceType: string;\n    friendlyName: string;\n    manufacturer: string;\n    manufacturerURL: string;\n    modelDescription: string;\n    modelName: string;\n    modelNumber: string;\n    modelURL: string;\n    serialNumber: string;\n    UDN: string;\n    ports: {\n        jsonServer: number;\n        sslServer: number;\n        protoBuffer: number;\n        flatBuffer: number;\n    };\n    presentationURL: string;\n    iconList: {\n        icon: {\n            mimetype: string;\n            height: number;\n            width: number;\n            depth: number;\n            url: string;\n        };\n    };\n};\n\nexport type ServerInfoType = {\n    command: string;\n    info: {\n        activeEffects: string[];\n        activeLedColor: Array<{\n            'HSL Value': [number, number, number];\n            'RGB Value': [number, number, number];\n        }>;\n        adjustment: Array<{\n            backlightColored: boolean;\n            backlightThreshold: number;\n            blue: [number, number, number];\n            brightness: number;\n            brightnessCompensation: number;\n            brightnessGain: number;\n            cyan: [number, number, number];\n            gammaBlue: number;\n            gammaGreen: number;\n            gammaRed: number;\n            green: [number, number, number];\n            id: string;\n            magenta: [number, number, number];\n            red: [number, number, number];\n            saturationGain: number;\n            white: [number, number, number];\n            yellow: [number, number, number];\n        }>;\n        cec: {\n            enabled: boolean;\n        };\n        components: Array<{\n            enabled: boolean;\n            name: string;\n        }>;\n        effects: Array<{\n            args: any;\n            file: string;\n            name: string;\n            script: string;\n        }>;\n        grabbers: {\n            audio: {\n                active: any[];\n                available: string[];\n            };\n            screen: {\n                active: string[];\n                available: string[];\n            };\n            video: {\n                active: string[];\n                available: string[];\n            };\n        };\n        hostname: string;\n        imageToLedMappingType: string;\n        instance: Array<{\n            friendly_name: string;\n            instance: number;\n            running: boolean;\n        }>;\n        ledDevices: {\n            available: string[];\n        };\n        leds: Array<{\n            hmax: number;\n            hmin: number;\n            vmax: number;\n            vmin: number;\n        }>;\n        priorities: Array<{\n            active: boolean;\n            componentId: string;\n            origin: string;\n            owner?: string;\n            priority: number;\n            value: {\n                HSL: [number, number, number];\n                RGB: [number, number, number];\n            };\n            visible: boolean;\n        }>;\n        priorities_autoselect: boolean;\n        services: string[];\n        transform: Array<{\n            blacklevel: [number, number, number];\n            brightnessGain: number;\n            gamma: [number, number, number];\n            id: string;\n            luminanceGain: number;\n            luminanceMinimum: number;\n            saturationGain: number;\n            saturationLGain: number;\n            threshold: [number, number, number];\n            whitelevel: [number, number, number];\n        }>;\n        videomode: string;\n    };\n    instance: number;\n    success: boolean;\n    tan: number;\n};\n\nexport type AdjustmentControlsType = {\n    id?: string;\n    red?: [number, number, number];\n    green?: [number, number, number];\n    blue?: [number, number, number];\n    cyan?: [number, number, number];\n    magenta?: [number, number, number];\n    yellow?: [number, number, number];\n    white?: [number, number, number];\n    gammaRed?: number;\n    gammaGreen?: number;\n    gammaBlue?: number;\n    backlightThreshold?: number;\n    backlightColored?: boolean;\n    brightness?: number;\n    brightnessGain?: number;\n    brightnessCompensation?: number;\n    saturationGain?: number;\n    temperature?: number;\n};\n\nexport type ServerInfoForStatesType = {\n    activeEffects: string;\n\n    activeLedColor: {\n        'HSL Value': string;\n        'RGB Value': string;\n    };\n\n    adjustment: {\n        backlightColored: boolean;\n        backlightThreshold: number;\n        blue: string;\n        brightness: number;\n        brightnessCompensation: number;\n        brightnessGain: number;\n        cyan: string;\n        gammaBlue: number;\n        gammaGreen: number;\n        gammaRed: number;\n        green: string;\n        id: string;\n        magenta: string;\n        red: string;\n        saturationGain: number;\n        white: string;\n        yellow: string;\n    };\n\n    cec: {\n        enabled: boolean;\n    };\n\n    components: {\n        enabled: boolean;\n        name: string;\n    };\n    effects: {\n        args: { blobs?: number };\n        file: string;\n        name: string;\n        script: string;\n    };\n    grabbers: {\n        audio: {\n            active: any;\n            available: string;\n        };\n        screen: {\n            active: string;\n            available: string;\n        };\n        video: {\n            active: string;\n            available: string;\n        };\n    };\n\n    hostname: string;\n    imageToLedMappingType: string;\n\n    instance: {\n        friendly_name: string;\n        instance: number;\n        running: boolean;\n    };\n    ledDevices: {\n        available: string;\n    };\n    leds: {\n        hmax: number;\n        hmin: number;\n        vmax: number;\n        vmin: number;\n    };\n    priorities: {\n        active: boolean;\n        componentId: string;\n        origin: string;\n        owner?: string;\n        priority: number;\n        value: {\n            HSL: string;\n            RGB: string;\n        };\n        visible: boolean;\n    };\n    priorities_autoselect: boolean;\n\n    services: string;\n\n    transform: {\n        blacklevel: string;\n        brightnessGain: number;\n        gamma: string;\n        id: string;\n        luminanceGain: number;\n        luminanceMinimum: number;\n        saturationGain: number;\n        saturationLGain: number;\n        threshold: string;\n        whitelevel: string;\n    };\n    videomode: string;\n};\n\ntype PriorityValue = {\n    HSL: [number, number, number];\n    RGB: [number, number, number];\n};\n\ntype Priority = {\n    active: boolean;\n    componentId: string;\n    origin: string;\n    owner?: string;\n    priority: number;\n    value?: PriorityValue;\n    visible: boolean;\n};\n\nexport type PrioritiesUpdateData = {\n    priorities: Priority[];\n    priorities_autoselect: boolean;\n};\nexport type PrioritiesUpdateDataStatesType = {\n    priorities: Priority;\n    priorities_autoselect: boolean;\n};\nexport type PrioritiesUpdateCommand = {\n    command: 'priorities-update';\n    data: PrioritiesUpdateData;\n    instance: number;\n};\n\ninterface HyperionInfo {\n    build: string;\n    gitremote: string;\n    id: string;\n    isGuiMode: boolean;\n    readOnlyMode: boolean;\n    rootPath: string;\n    time: string;\n    version: string;\n}\n\ninterface SystemInfo {\n    architecture: string;\n    cpuHardware: string;\n    cpuModelName: string;\n    cpuModelType: string;\n    cpuRevision: string;\n    domainName: string;\n    hostName: string;\n    isUserAdmin: boolean;\n    kernelType: string;\n    kernelVersion: string;\n    prettyName: string;\n    productType: string;\n    productVersion: string;\n    pyVersion: string;\n    qtVersion: string;\n    wordSize: string;\n}\nexport interface SysInfoInfo {\n    hyperion: HyperionInfo;\n    system: SystemInfo;\n}\n\nexport interface SysInfoCommand {\n    command: string;\n    info: SysInfoInfo;\n    success: boolean;\n    tan: number;\n}\n\nexport type configOfHyperionInstance = {\n    name?: string;\n    UDN: string;\n    ip: string;\n    token?: string;\n    enabled: boolean;\n    protocol: string;\n    port: number;\n    URLBase?: string;\n};\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
