{
  "version": 3,
  "sources": ["../../src/lib/network.ts"],
  "sourcesContent": ["//import type { AdapterClassDefinition } from './library';\nimport { XMLParser } from 'fast-xml-parser';\nimport { BaseClass, type AdapterClassDefinition } from './library';\nimport SsdpNode from 'node-ssdp';\nimport * as http from 'http';\nimport type { DescriptionType } from './types-d';\nimport type { WebSocket } from 'ws';\nimport { descriptionUrlAppendix } from './definition';\n\n/**\n * Network class\n * use this for the ssdp stuff\n */\nexport class Network extends BaseClass {\n    private readonly serviceType: string = 'urn:hyperion-project.org:device:basic:1';\n    private ssdpTimeout: ioBroker.Timeout | undefined = undefined;\n\n    private ssdp: SsdpNode.Client;\n    private parser: XMLParser;\n    /**\n     * deviceList\n     * key: device id\n     * value: device name\n     */\n    private deviceList: Record<string, { socket: WebSocket | undefined; url: string; descriptionUrl: string }> = {};\n    /**\n     * constructor\n     *\n     * @param adapter adapter class definition\n     * @param name name of the object for logging\n     */\n    constructor(adapter: AdapterClassDefinition, name: string = '') {\n        super(adapter, name);\n        this.ssdp = new SsdpNode.Client();\n        this.parser = new XMLParser();\n    }\n    /**\n     *  doDiscovery\n     *\n     * @param callback callback function\n     */\n    async doDiscovery(\n        callback: (protocol: string, ip: string, port: number, device: DescriptionType) => Promise<void>,\n    ): Promise<void> {\n        this.log.debug(`Searching for service: ${this.serviceType}`);\n        this.ssdp.on('response', async (headers, statusCode, rinfo) => {\n            if (\n                headers === undefined ||\n                statusCode !== 200 ||\n                headers.USN === undefined ||\n                headers.LOCATION === undefined\n            ) {\n                return;\n            }\n            if (rinfo === undefined || this.deviceList[headers.USN] !== undefined) {\n                return;\n            }\n            // do something because a new device was found\n            this.log.debug(\n                `New/Updated service: USN: ${headers.USN}, Status:${statusCode}, Adress:${rinfo.address}, location:${headers.LOCATION}`,\n            );\n            try {\n                // get ip from location\n                const url = new URL(headers.LOCATION);\n                const ip = url.hostname;\n                const port = parseInt(url.port ?? -1);\n                const protocol = url.protocol;\n                if (ip === undefined || port < 0 || protocol === undefined) {\n                    this.log.warn('Error getting ip, port or protocol');\n                    return;\n                }\n                const description = await this.getSsdpDescription(protocol, ip, port);\n\n                if (description) {\n                    this.deviceList[headers.USN] = { socket: undefined, url: '', descriptionUrl: description.URLBase };\n                    await callback(protocol, ip, port, description);\n                }\n            } catch (error) {\n                this.adapter.log.warn(`Error getting description: ${error as string}`);\n            }\n        });\n\n        await this.ssdp.search(this.serviceType);\n    }\n\n    /**\n     * get description from server (ssdp)\n     *\n     * @param protocol http or https\n     * @param ip ip address\n     * @param port port\n     */\n    async getSsdpDescription(protocol: string, ip: string, port: number): Promise<DescriptionType | undefined> {\n        return new Promise((resolve, reject) => {\n            const location = `${protocol}//${ip}:${port}${descriptionUrlAppendix}`;\n            http.get(location, res => {\n                let data = '';\n                res.on('data', chunk => {\n                    data += chunk;\n                });\n                res.on('end', () => {\n                    try {\n                        const description = this.parser.parse(data);\n                        resolve(description.root);\n                    } catch (error) {\n                        this.adapter.log.error(`Error parsing description: ${error as string}`);\n                        resolve(undefined);\n                    }\n                });\n            }).on('error', error => {\n                reject(error);\n            });\n        });\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    onUnload(): void {\n        if (this.ssdpTimeout) {\n            this.adapter.clearTimeout(this.ssdpTimeout);\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,6BAA0B;AAC1B,qBAAuD;AACvD,uBAAqB;AACrB,WAAsB;AAGtB,wBAAuC;AAMhC,MAAM,gBAAgB,yBAAU;AAAA,EAClB,cAAsB;AAAA,EAC/B,cAA4C;AAAA,EAE5C;AAAA,EACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAqG,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO9G,YAAY,SAAiC,OAAe,IAAI;AAC5D,UAAM,SAAS,IAAI;AACnB,SAAK,OAAO,IAAI,iBAAAA,QAAS,OAAO;AAChC,SAAK,SAAS,IAAI,iCAAU;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,YACF,UACa;AACb,SAAK,IAAI,MAAM,0BAA0B,KAAK,WAAW,EAAE;AAC3D,SAAK,KAAK,GAAG,YAAY,OAAO,SAAS,YAAY,UAAU;AA7CvE;AA8CY,UACI,YAAY,UACZ,eAAe,OACf,QAAQ,QAAQ,UAChB,QAAQ,aAAa,QACvB;AACE;AAAA,MACJ;AACA,UAAI,UAAU,UAAa,KAAK,WAAW,QAAQ,GAAG,MAAM,QAAW;AACnE;AAAA,MACJ;AAEA,WAAK,IAAI;AAAA,QACL,6BAA6B,QAAQ,GAAG,YAAY,UAAU,YAAY,MAAM,OAAO,cAAc,QAAQ,QAAQ;AAAA,MACzH;AACA,UAAI;AAEA,cAAM,MAAM,IAAI,IAAI,QAAQ,QAAQ;AACpC,cAAM,KAAK,IAAI;AACf,cAAM,OAAO,UAAS,SAAI,SAAJ,YAAY,EAAE;AACpC,cAAM,WAAW,IAAI;AACrB,YAAI,OAAO,UAAa,OAAO,KAAK,aAAa,QAAW;AACxD,eAAK,IAAI,KAAK,oCAAoC;AAClD;AAAA,QACJ;AACA,cAAM,cAAc,MAAM,KAAK,mBAAmB,UAAU,IAAI,IAAI;AAEpE,YAAI,aAAa;AACb,eAAK,WAAW,QAAQ,GAAG,IAAI,EAAE,QAAQ,QAAW,KAAK,IAAI,gBAAgB,YAAY,QAAQ;AACjG,gBAAM,SAAS,UAAU,IAAI,MAAM,WAAW;AAAA,QAClD;AAAA,MACJ,SAAS,OAAO;AACZ,aAAK,QAAQ,IAAI,KAAK,8BAA8B,KAAe,EAAE;AAAA,MACzE;AAAA,IACJ,CAAC;AAED,UAAM,KAAK,KAAK,OAAO,KAAK,WAAW;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,mBAAmB,UAAkB,IAAY,MAAoD;AACvG,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,YAAM,WAAW,GAAG,QAAQ,KAAK,EAAE,IAAI,IAAI,GAAG,wCAAsB;AACpE,WAAK,IAAI,UAAU,SAAO;AACtB,YAAI,OAAO;AACX,YAAI,GAAG,QAAQ,WAAS;AACpB,kBAAQ;AAAA,QACZ,CAAC;AACD,YAAI,GAAG,OAAO,MAAM;AAChB,cAAI;AACA,kBAAM,cAAc,KAAK,OAAO,MAAM,IAAI;AAC1C,oBAAQ,YAAY,IAAI;AAAA,UAC5B,SAAS,OAAO;AACZ,iBAAK,QAAQ,IAAI,MAAM,8BAA8B,KAAe,EAAE;AACtE,oBAAQ,MAAS;AAAA,UACrB;AAAA,QACJ,CAAC;AAAA,MACL,CAAC,EAAE,GAAG,SAAS,WAAS;AACpB,eAAO,KAAK;AAAA,MAChB,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,WAAiB;AACb,QAAI,KAAK,aAAa;AAClB,WAAK,QAAQ,aAAa,KAAK,WAAW;AAAA,IAC9C;AAAA,EACJ;AACJ;",
  "names": ["SsdpNode"]
}
